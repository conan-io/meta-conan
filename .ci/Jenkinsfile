#!groovyâ€‹

node('Linux') {
    stage('Clone sources') {
        checkout scm
    }

    def image = null
    stage('Build docker image') {
        image = docker.build('meta-conan-validate', '-f .ci/Dockerfile .')
    }

    branchName = env.CHANGE_TARGET ? env.CHANGE_TARGET : "kirkstone"
    branchName = branchName == "master" ? "kirkstone" : branchName
    echo "Using branch name as yocto version: ${branchName}"

    // stage('Validate Yocto layer') {
    //     image.inside {
    //         sh """
    //             whoami
    //             WORKSPACE=${PWD}
    //             git clone --depth 1 git://git.yoctoproject.org/poky -b ${branchName} /tmp/poky
    //             git clone --depth 1 git://git.openembedded.org/meta-openembedded.git -b ${branchName} /tmp/meta-openembedded
    //             cd /tmp/poky/
    //             . /tmp/poky/oe-init-build-env
    //             touch conf/sanity.conf
    //             cd /tmp/meta-openembedded
    //             yocto-check-layer -d --dependency meta-oe meta-python --with-software-layer-signature-check ${WORKSPACE}
    //         """
    //     }
    // }

    def yocto_builder_image = null
    stage('Build yocto-builder docker image') {
        sh "docker build -t conan-io/yocto-builder:${env.BUILD_ID} .ci/yocto/"
    }

    stage('Build yocto image') {
        try {
            sh "docker run -d -t --name yocto-builder-${env.BUILD_ID} conan-io/yocto-builder:${env.BUILD_ID}"
            sh "docker exec -t yocto-builder-${env.BUILD_ID} /bin/bash -c 'git clone --branch ${branchName} --depth 1 git://git.yoctoproject.org/poky'"
            sh "docker exec -t yocto-builder-${env.BUILD_ID} /bin/bash -c 'mkdir poky/conf && touch poky/conf/sanity.conf'"
            sh "docker exec -t yocto-builder-${env.BUILD_ID} /bin/bash -c 'git clone --branch ${branchName} https://github.com/conan-io/meta-conan.git poky/meta-conan && git clone --branch ${branchName} https://github.com/openembedded/meta-openembedded.git poky/meta-openembedded'"
            sh "docker exec -t yocto-builder-${env.BUILD_ID} /bin/bash ls -la poky'"
            sh "docker exec -t yocto-builder-${env.BUILD_ID} /bin/bash ls -la poky/meta-openembedded'"
            sh "docker exec -t yocto-builder-${env.BUILD_ID} /bin/bash -c 'mkdir build'"
            sh "docker exec -t yocto-builder-${env.BUILD_ID} /bin/bash -c 'cd build && source ../poky/oe-init-build-env'"
            sh "docker exec -t yocto-builder-${env.BUILD_ID} /bin/bash -c 'cd build && source ../poky/oe-init-build-env && bitbake-layers add-layer ../poky/meta-openembedded/meta-oe'"
            sh "docker exec -t yocto-builder-${env.BUILD_ID} /bin/bash -c 'cd build && source ../poky/oe-init-build-env && bitbake-layers add-layer ../poky/meta-openembedded/meta-python'"
            sh "docker exec -t yocto-builder-${env.BUILD_ID} /bin/bash -c 'cd build && source ../poky/oe-init-build-env && bitbake-layers add-layer ../poky/meta-openembedded/meta-conan'"
            sh "docker exec -t yocto-builder-${env.BUILD_ID} /bin/bash -c 'source poky/oe-init-build-env && bitbake -k core-image-minimal build'"
        } finally {
            sh "docker rm -f yocto-builder-${env.BUILD_ID} || true"
            sh "docker rmi -f conan-io/yocto-builder:${env.BUILD_ID} || true"
        }
    }
}
